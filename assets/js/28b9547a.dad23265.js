"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[498],{3905:(e,t,r)=>{r.d(t,{Zo:()=>k,kt:()=>N});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),o=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},k=function(e){var t=o(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,k=p(e,["components","mdxType","originalType","parentName"]),m=o(r),d=n,N=m["".concat(i,".").concat(d)]||m[d]||s[d]||l;return r?a.createElement(N,u(u({ref:t},k),{},{components:r})):a.createElement(N,u({ref:t},k))}));function N(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,u=new Array(l);u[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[m]="string"==typeof e?e:n,u[1]=p;for(var o=2;o<l;o++)u[o]=r[o];return a.createElement.apply(null,u)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8250:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>s,frontMatter:()=>l,metadata:()=>p,toc:()=>o});var a=r(7462),n=(r(7294),r(3905));const l={title:"Future<Result<Ok, Error>>",sidebar_label:"Future<Result> helpers"},u=void 0,p={unversionedId:"future-result",id:"future-result",title:"Future<Result<Ok, Error>>",description:"A Future can contain a Result (e.g. to represent an asynchronous value that can fail). We provide some utility functions to deal with that case without having to unwrap the Future result.",source:"@site/docs/future-result.md",sourceDirName:".",slug:"/future-result",permalink:"/future-result",draft:!1,editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/future-result.md",tags:[],version:"current",frontMatter:{title:"Future<Result<Ok, Error>>",sidebar_label:"Future<Result> helpers"},sidebar:"docs",previous:{title:"Future<Value>",permalink:"/future"},next:{title:"Deferred",permalink:"/deferred"}},i={},o=[{value:"Methods",id:"methods",level:2},{value:".mapOkToResult(f)",id:"mapoktoresultf",level:3},{value:".mapErrorToResult(f)",id:"maperrortoresultf",level:3},{value:".mapOk(f)",id:"mapokf",level:3},{value:".mapError(f)",id:"maperrorf",level:3},{value:".flatMapOk(f)",id:"flatmapokf",level:3},{value:".flatMapError(f)",id:"flatmaperrorf",level:3},{value:".tapOk(f)",id:"tapokf",level:3},{value:".tapError(f)",id:"taperrorf",level:3},{value:".resultToPromise()",id:"resulttopromise",level:3},{value:"Statics",id:"statics",level:2},{value:"Future.all(resultFutures)",id:"futureallresultfutures",level:3},{value:"Future.allFromDict(resultFutures)",id:"futureallfromdictresultfutures",level:3},{value:"Future.retry(getFuture)",id:"futureretrygetfuture",level:3},{value:"Cheatsheet",id:"cheatsheet",level:2}],k={toc:o},m="wrapper";function s(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,a.Z)({},k,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"A ",(0,n.kt)("a",{parentName:"p",href:"./future"},"Future")," can contain a ",(0,n.kt)("inlineCode",{parentName:"p"},"Result")," (e.g. to represent an asynchronous value that can fail). We provide some utility functions to deal with that case without having to unwrap the Future result."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"You can still use all the regular ",(0,n.kt)("a",{parentName:"p",href:"./future"},"Future")," methods. The following helpers simply removes the need to unwrap the contained result.")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"mapoktoresultf"},".mapOkToResult(f)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.mapOkToResult<B, F>(\n  func: (value: A) => Result<B, F>,\n  propagateCancel?: boolean\n): Future<Result<B, E | F>>\n")),(0,n.kt)("p",null,"Takes a ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and a ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," function taking ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok")," and returning ",(0,n.kt)("inlineCode",{parentName:"p"},"Result<ReturnValue, Error>")," and returns a new ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<ReturnValue, Error>>")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'Future.value(Result.Ok(3)).mapOkToResult((ok) => {\n  return Result.Ok(ok * 2);\n});\n// Future<Result.Ok<6>>\n\nFuture.value(Result.Ok(3)).mapOkToResult((ok) =>\n  isEven(ok) ? Result.Ok(ok) : Result.Error("Odd number");\n);\n// Future<Result.Error<"Odd number">>\n')),(0,n.kt)("h3",{id:"maperrortoresultf"},".mapErrorToResult(f)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.mapErrorToResult<B, F>(\n  func: (value: E) => Result<B, F>,\n  propagateCancel?: boolean\n): Future<Result<A | B, F>>\n")),(0,n.kt)("p",null,"Takes a ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and a ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," function taking ",(0,n.kt)("inlineCode",{parentName:"p"},"Error")," and returning ",(0,n.kt)("inlineCode",{parentName:"p"},"Result<Ok, ReturnError>")," and returns a new ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, ReturnError>>")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'Future.value(Result.Error(3)).mapErrorToResult((ok) => {\n  return Result.Ok(ok * 2);\n});\n// Future<Result.Ok<6>>\n\nFuture.value(Result.Error(3)).mapErrorToResult((ok) =>\n  isEven(ok) ? Result.Ok(ok) : Result.Error("Odd number");\n);\n// Future<Result.Error<"Odd number">>\n')),(0,n.kt)("h3",{id:"mapokf"},".mapOk(f)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.mapOk<B>(\n  func: (value: A) => B,\n  propagateCancel?: boolean\n): Future<Result<B, E>>\n")),(0,n.kt)("p",null,"Takes a ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and a ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," function taking ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok")," and returning ",(0,n.kt)("inlineCode",{parentName:"p"},"ReturnValue")," and returns a new ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<ReturnValue, Error>>")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'Future.value(Result.Ok(3)).mapOk((ok) => {\n  return ok * 2;\n});\n// Future<Result.Ok<6>>\n\nFuture.value(Result.Error("something")).mapOk((ok) => {\n  return ok * 2;\n});\n// Future<Result.Error<"something">>\n')),(0,n.kt)("h3",{id:"maperrorf"},".mapError(f)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.mapError<F>(\n  func: (value: E) => F,\n  propagateCancel?: boolean\n): Future<Result<A, F>>\n")),(0,n.kt)("p",null,"Takes a ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and a ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," function taking ",(0,n.kt)("inlineCode",{parentName:"p"},"Error")," and returning ",(0,n.kt)("inlineCode",{parentName:"p"},"ReturnValue")," and returns a new ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, ReturnValue>>")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'Future.value(Result.Error(3)).mapError((error) => {\n  return error * 2;\n});\n// Future<Result.Error<6>>\n\nFuture.value(Result.Ok("something")).mapError((ok) => {\n  return ok * 2;\n});\n// Future<Result.Ok<"something">>\n')),(0,n.kt)("h3",{id:"flatmapokf"},".flatMapOk(f)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.flatMapOk<B, F>(\n  func: (value: A) => Future<Result<B, F>>,\n  propagateCancel?: boolean\n): Future<Result<B, E | F>>\n")),(0,n.kt)("p",null,"Takes a ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and a ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," function taking ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok")," returning a ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<ReturnValue, Error>>")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'Future.value(Result.Ok(3)).flatMapOk((ok) => Future.value(Result.Ok(ok * 2)));\n// Future<Result.Ok<6>>\n\nFuture.value(Result.Ok(3)).flatMapOk((ok) =>\n  Future.value(Result.Error("Nope")),\n);\n// Future<Result.Error<"Nope">>\n\nFuture.value(Result.Error("Error")).flatMapOk((ok) =>\n  Future.value(Result.Ok(ok * 2)),\n);\n// Future<Result.Error<"Error">>\n')),(0,n.kt)("h3",{id:"flatmaperrorf"},".flatMapError(f)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.flatMapError<B, F>(\n  func: (value: E) => Future<Result<B, F>>,\n  propagateCancel?: boolean\n): Future<Result<A | B, F>>\n")),(0,n.kt)("p",null,"Takes a ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and a ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," function taking ",(0,n.kt)("inlineCode",{parentName:"p"},"Error")," returning a ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, ReturnValue>>")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'Future.value(Result.Ok(3)).flatMapError((error) =>\n  Future.value(Result.Ok(ok * 2)),\n);\n// Future<Result.Ok<3>>\n\nFuture.value(Result.Error("Error")).flatMapError((error) =>\n  Future.value(Result.Error("Nope")),\n);\n// Future<Result.Error<"Nope">>\n\nFuture.value(Result.Error("Error")).flatMapError((error) =>\n  Future.value(Result.Ok(1)),\n);\n// Future<Result.Ok<1>>\n')),(0,n.kt)("h3",{id:"tapokf"},".tapOk(f)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.tapOk(func: (value: A) => unknown): Future<Result<A, E>>\n")),(0,n.kt)("p",null,"Runs ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," if value is ",(0,n.kt)("inlineCode",{parentName:"p"},"Ok")," with the future value, and returns the original future. Useful for debugging."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"future.tapOk(console.log);\n")),(0,n.kt)("h3",{id:"taperrorf"},".tapError(f)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.tapError(func: (value: E) => unknown): Future<Result<A, E>>\n")),(0,n.kt)("p",null,"Runs ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," if value is ",(0,n.kt)("inlineCode",{parentName:"p"},"Error")," with the future value, and returns the original future. Useful for debugging."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"future.tapError(console.log);\n")),(0,n.kt)("h3",{id:"resulttopromise"},".resultToPromise()"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.resultToPromise(): Promise<A>\n")),(0,n.kt)("p",null,"Takes a ",(0,n.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and returns a ",(0,n.kt)("inlineCode",{parentName:"p"},"Promise<Ok>"),", rejecting the promise with ",(0,n.kt)("inlineCode",{parentName:"p"},"Error")," in this state."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Future.value(Result.Ok(1)).resultToPromise();\n// Promise<1>\n\nFuture.value(Result.Reject(1)).resultToPromise();\n// Promise (rejected with 1)\n")),(0,n.kt)("h2",{id:"statics"},"Statics"),(0,n.kt)("h3",{id:"futureallresultfutures"},"Future.all(resultFutures)"),(0,n.kt)("p",null,"You can combine the ",(0,n.kt)("inlineCode",{parentName:"p"},"all")," helpers from ",(0,n.kt)("inlineCode",{parentName:"p"},"Future")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"Result"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"const futures = [\n  Future.value(Result.Ok(1)),\n  Future.value(Result.Ok(2)),\n  Future.value(Result.Ok(3)),\n];\n\nFuture.all(futures).map(Result.all);\n// Future<Result.Ok<[1, 2, 3]>>\n")),(0,n.kt)("p",null,"Let's see the types at each step:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"// Array<Future<Result<number, never>>>\n// -> [Future<Result.Ok<1>>, Future<Result.Ok<2>>, Future<Result.Ok<3>>]\nconst input = [\n  Future.value(Result.Ok(1)),\n  Future.value(Result.Ok(2)),\n  Future.value(Result.Ok(3)),\n];\n\n// Future<Array<Result<number, never>>>\n// -> Future<[Result.Ok<1>>, Result.Ok<2>>, Result.Ok<3>]>\nconst step1 = Future.all(input);\n\n// Future<Result<Array<number>, never>>\n// -> Future<[Result.Ok<[1, 2, 3]>>\nconst step2 = step1.map(Result.all);\n")),(0,n.kt)("h3",{id:"futureallfromdictresultfutures"},"Future.allFromDict(resultFutures)"),(0,n.kt)("p",null,"Like as ",(0,n.kt)("inlineCode",{parentName:"p"},"all"),", you can combine the ",(0,n.kt)("inlineCode",{parentName:"p"},"allFromDict"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"const futures = {\n  a: Future.value(Result.Ok(1)),\n  b: Future.value(Result.Ok(2)),\n  c: Future.value(Result.Ok(3)),\n};\n\nFuture.allFromDict(futures).map(Result.allFromDict);\n// Future<[Result.Ok<{a: 1, b: 2, c: 3}>>\n")),(0,n.kt)("p",null,"Let's see the types at each step:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"// Dict<Future<Result<number, never>>>\n// -> {a: Future<Result.Ok<1>>, b: Future<Result.Ok<2>>, c: Future<Result.Ok<3>>\u2014\nconst input = {\n  a: Future.value(Result.Ok(1)),\n  b: Future.value(Result.Ok(2)),\n  c: Future.value(Result.Ok(3)),\n};\n\n// Future<Dict<Result<number, never>>>\n// -> Future<{a: Result.Ok<1>>, b: Result.Ok<2>>, c: Result.Ok<3>}>\nconst step1 = Future.all(input);\n\n// Future<Result<Array<number>, never>>\n// -> Future<[Result.Ok<{a: 1, b: 2, c: 3}>>\nconst step2 = step1.map(Result.all);\n")),(0,n.kt)("h3",{id:"futureretrygetfuture"},"Future.retry(getFuture)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"retry(getFuture: () => Future<Result<A, E>>, {max: number}): Future<Result<A, E>>\n")),(0,n.kt)("p",null,"Runs the future getter, if the future resolves with a ",(0,n.kt)("inlineCode",{parentName:"p"},"Result.Error"),", retries until hitting ",(0,n.kt)("inlineCode",{parentName:"p"},"max")," attempts."),(0,n.kt)("p",null,"The function provides a 0-based ",(0,n.kt)("inlineCode",{parentName:"p"},"attempt")," count to the function if you need to implement delay logic."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"// retry immediately after failure\nFuture.retry(\n  (attempt) => {\n    return getUserById(userId);\n  },\n  { max: 3 },\n);\n// Future<Result<...>>\n\n// adding delay\nFuture.retry(\n  (attempt) => {\n    return Future.wait(attempt * 100).flatMap(() => getUserById(userId));\n  },\n  { max: 10 },\n);\n// Future<Result<...>>\n")),(0,n.kt)("h2",{id:"cheatsheet"},"Cheatsheet"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Method"),(0,n.kt)("th",{parentName:"tr",align:null},"Input"),(0,n.kt)("th",{parentName:"tr",align:null},"Function input"),(0,n.kt)("th",{parentName:"tr",align:null},"Function output"),(0,n.kt)("th",{parentName:"tr",align:null},"Returned value"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#mapoktoresultf"},(0,n.kt)("inlineCode",{parentName:"a"},"mapOkToResult"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(x))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"x")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Ok(y)")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(y))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#mapoktoresultf"},(0,n.kt)("inlineCode",{parentName:"a"},"mapOkToResult"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(x))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"x")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Error(f)")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(f))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#mapoktoresultf"},(0,n.kt)("inlineCode",{parentName:"a"},"mapOkToResult"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(e))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not provided")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not executed")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(e))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#maperrortoresultf"},(0,n.kt)("inlineCode",{parentName:"a"},"mapErrorToResult"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(e))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"e")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Ok(y)")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(y))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#maperrortoresultf"},(0,n.kt)("inlineCode",{parentName:"a"},"mapErrorToResult"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(e))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"e")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Error(f)")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(f))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#maperrortoresultf"},(0,n.kt)("inlineCode",{parentName:"a"},"mapErrorToResult"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(x))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not provided")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not executed")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(x))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#mapokf"},(0,n.kt)("inlineCode",{parentName:"a"},"mapOk"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(x))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"x")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"y")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(y))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#mapokf"},(0,n.kt)("inlineCode",{parentName:"a"},"mapOk"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(e))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not provided")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not executed")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(e))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#maperrorf"},(0,n.kt)("inlineCode",{parentName:"a"},"mapError"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(x))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not provided")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not executed")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(x))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#maperrorf"},(0,n.kt)("inlineCode",{parentName:"a"},"mapError"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(e))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"e")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"f")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(f))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#flatmapokf"},(0,n.kt)("inlineCode",{parentName:"a"},"flatMapOk"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(x))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"x")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(y))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(y))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#flatmapokf"},(0,n.kt)("inlineCode",{parentName:"a"},"flatMapOk"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(x))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"x")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(f))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(f))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#flatmapokf"},(0,n.kt)("inlineCode",{parentName:"a"},"flatMapOk"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(e))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not provided")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not executed")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(e))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#flatmaperrorf"},(0,n.kt)("inlineCode",{parentName:"a"},"flatMapError"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(x))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not provided")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("em",{parentName:"td"},"not executed")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(x))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#flatmaperrorf"},(0,n.kt)("inlineCode",{parentName:"a"},"flatMapError"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(e))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"e")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(y))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Ok(y))"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"#flatmaperrorf"},(0,n.kt)("inlineCode",{parentName:"a"},"flatMapError"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(e))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"e")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(f))")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Future(Error(f))"))))))}s.isMDXComponent=!0}}]);