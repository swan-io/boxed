"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[61],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8635:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={title:"Form Validation",sidebar_label:"Form Validation"},o=void 0,l={unversionedId:"form-validation",id:"form-validation",title:"Form Validation",description:"A common need in applications is to validate user-input before sending it to the server.",source:"@site/docs/form-validation.md",sourceDirName:".",slug:"/form-validation",permalink:"/form-validation",draft:!1,editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/form-validation.md",tags:[],version:"current",frontMatter:{title:"Form Validation",sidebar_label:"Form Validation"},sidebar:"docs",previous:{title:"React Request",permalink:"/react-request"},next:{title:"Nested optional values",permalink:"/nested-optional-values"}},s={},p=[],u={toc:p},d="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A common need in applications is to validate user-input before sending it to the server."),(0,a.kt)("p",null,"Let's assume we have a form with the following fields:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type FormInput = {\n  id: string;\n  amount: number;\n};\n")),(0,a.kt)("p",null,"One can use exceptions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const validate = (input: FormInput) => {\n  if (input.id.trim().length !== 24) {\n    throw new Error("Input ID is invalid");\n  }\n  if (input.amount <= 0) {\n    throw new Error("Invalid amount");\n  }\n};\n')),(0,a.kt)("p",null,"In that case, we'd use a ",(0,a.kt)("inlineCode",{parentName:"p"},"try")," statement:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"try {\n  const sanitized = sanitize(input);\n  validate(sanitized);\n  setValidation(null);\n\n  // send to the server\n} catch (err) {\n  setValidation(err);\n}\n")),(0,a.kt)("p",null,"Or one can return errors from the ",(0,a.kt)("inlineCode",{parentName:"p"},"validate")," function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const validate = (input: FormInput) => {\n  const errors = [];\n  if (input.id.trim().length !== 24) {\n    errors.push("Input ID is invalid");\n  }\n  if (input.amount <= 0) {\n    errors.push("Invalid amount");\n  }\n  return errors;\n};\n')),(0,a.kt)("p",null,"Which would be consumed like the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const sanitized = sanitize(input);\nconst errors = validate(sanitized);\nif (errors.length) {\n  setValidation(errors);\n  // show the errors\n} else {\n  setValidation(null);\n  // send to the server\n}\n")),(0,a.kt)("p",null,"In both cases, we are required to have handle the ",(0,a.kt)("inlineCode",{parentName:"p"},"validation")," state manually, which increases complexity and can lead to UI inconsistencies. Let's see how we can leverage the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," type for such patterns:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Result } from "@swan-io/boxed";\n\nconst validate = (input: FormInput): Result<FormInput, Array<string>> => {\n  const errors = [];\n  const id = input.id.trim();\n  if (id.length !== 24) {\n    errors.push("Input ID is invalid");\n  }\n  if (input.amount <= 0) {\n    errors.push("Invalid amount");\n  }\n\n  // We can directly return a sanitized version if the validation passed\n  return errors.length === 0\n    ? Result.Ok({ ...input, id })\n    : Result.Error(errors);\n};\n')),(0,a.kt)("p",null,"Here, the ",(0,a.kt)("inlineCode",{parentName:"p"},"validate")," return value can directly give you ",(0,a.kt)("strong",{parentName:"p"},"the sanitized input")," or ",(0,a.kt)("strong",{parentName:"p"},"the validation errors"),", depending on which case you're in."),(0,a.kt)("p",null,"We can then store the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," directly:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// A single codepath for handling the validation\nconst validation = validate(input);\n\nsetValidation(validation);\n\nvalidation.match({\n  Error: () => {} // do nothing\n  Ok: (sanitizedInput) => {\n    sendToServer(sanitizedInput)\n  }\n})\n\n// and pattern match in the UI code\n<Input\n  name="id"\n  value={input.id}\n  onChange={id => setInput({...input, id}))}\n  hasError={validation.match({\n    Ok: () => false,\n    Error: (errors) => errors.includes("Input ID is invalid"),\n  })}\n/>;\n')))}c.isMDXComponent=!0}}]);