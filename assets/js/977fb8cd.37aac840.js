"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[20],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function u(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):u(u({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=s(a),d=r,f=m["".concat(o,".").concat(d)]||m[d]||c[d]||l;return a?n.createElement(f,u(u({ref:t},p),{},{components:a})):n.createElement(f,u({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,u=new Array(l);u[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[m]="string"==typeof e?e:r,u[1]=i;for(var s=2;s<l;s++)u[s]=a[s];return n.createElement.apply(null,u)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6955:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>u,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const l={title:"Future<Value>",sidebar_label:"Future<Value>"},u=void 0,i={unversionedId:"future",id:"future",title:"Future<Value>",description:"The Future is a replacement for Promise.",source:"@site/docs/future.md",sourceDirName:".",slug:"/future",permalink:"/future",draft:!1,editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/future.md",tags:[],version:"current",frontMatter:{title:"Future<Value>",sidebar_label:"Future<Value>"},sidebar:"docs",previous:{title:"AsyncData<Result> helpers",permalink:"/async-data-result"},next:{title:"Future<Result> helpers",permalink:"/future-result"}},o={},s=[{value:"Main differences with Promises",id:"main-differences-with-promises",level:2},{value:"Create a Future",id:"create-a-future",level:2},{value:"Methods",id:"methods",level:2},{value:".onResolve(f)",id:"onresolvef",level:3},{value:".onCancel(f)",id:"oncancelf",level:3},{value:".map(f)",id:"mapf",level:3},{value:".flatMap(f)",id:"flatmapf",level:3},{value:".tap(f)",id:"tapf",level:3},{value:".toPromise()",id:"topromise",level:3},{value:"Future&lt;Result&lt;Ok, Error&gt;&gt;",id:"futureresultok-error",level:2},{value:"Statics",id:"statics",level:2},{value:"Future.isFuture(value)",id:"futureisfuturevalue",level:3},{value:"Future.all(futures)",id:"futureallfutures",level:3},{value:"Future.concurrent(futureGetters, options)",id:"futureconcurrentfuturegetters-options",level:3},{value:"Future.wait(ms)",id:"futurewaitms",level:3},{value:"Future.allFromDict(futures)",id:"futureallfromdictfutures",level:3},{value:"Future.fromPromise(promise)",id:"futurefrompromisepromise",level:3},{value:"Cancellation",id:"cancellation",level:2},{value:"Basics",id:"basics",level:3},{value:"Bubbling cancellation",id:"bubbling-cancellation",level:3},{value:"Cheatsheet",id:"cheatsheet",level:2}],p={toc:s},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Future")," is a replacement for ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"."),(0,r.kt)("h2",{id:"main-differences-with-promises"},"Main differences with Promises"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Futures don't handle rejection state, instead leaving it to a contained ",(0,r.kt)("inlineCode",{parentName:"li"},"Result")),(0,r.kt)("li",{parentName:"ul"},"Futures have built-in cancellation (and don't reject like the fetch ",(0,r.kt)("inlineCode",{parentName:"li"},"signal")," API does)"),(0,r.kt)("li",{parentName:"ul"},'Futures don\'t "swallow" futures that are returned from ',(0,r.kt)("inlineCode",{parentName:"li"},"map")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"flatMap")),(0,r.kt)("li",{parentName:"ul"},"Future callbacks run synchronously")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Even though we're diverging from ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),", you can ",(0,r.kt)("inlineCode",{parentName:"p"},"await")," a ",(0,r.kt)("inlineCode",{parentName:"p"},"Future"),".")),(0,r.kt)("h2",{id:"create-a-future"},"Create a Future"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'import { Future } from "@swan-io/boxed";\n\n// Value\nconst future = Future.value(1);\n\n// Simple future\nconst otherFuture = Future.make((resolve) => {\n  resolve(1);\n});\n\n// Future with cancellation effect\nconst otherFuture = Future.make((resolve) => {\n  const timeoutId = setTimeout(() => {\n    resolve(1);\n  }, 1000);\n  return () => clearTimeout(timeoutId);\n});\n')),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"onresolvef"},".onResolve(f)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Future<A>.onResolve(func: (value: A) => void): void\n")),(0,r.kt)("p",null,"Runs ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," with the future value as argument when available."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Future.value(1).onResolve(console.log);\n// Log: 1\n")),(0,r.kt)("h3",{id:"oncancelf"},".onCancel(f)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Future<A>.onCancel(func: () => void): void\n")),(0,r.kt)("p",null,"Runs ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," when the future is cancelled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"future.onCancel(() => {\n  // do something\n});\n")),(0,r.kt)("h3",{id:"mapf"},".map(f)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Future<A>.map<B>(func: (value: A) => B, propagateCancel?: boolean): Future<B>\n")),(0,r.kt)("p",null,"Takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"Future<A>")," and returns a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Future<f<A>>")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Future.value(3).map((x) => x * 2);\n// Future<6>\n")),(0,r.kt)("h3",{id:"flatmapf"},".flatMap(f)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Future<A>.flatMap<B>(func: (value: A) => Future<B>, propagateCancel?: boolean): Future<B>\n")),(0,r.kt)("p",null,"Takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"Future<A>"),", and returns a new future taking the value of the future returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"f(A)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Future.value(3).flatMap((x) => Future.value(x * 2));\n// Future<6>\n")),(0,r.kt)("h3",{id:"tapf"},".tap(f)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Future<A>.tap(func: (value: A) => unknown): Future<A>\n")),(0,r.kt)("p",null,"Runs ",(0,r.kt)("inlineCode",{parentName:"p"},"f")," with the future value, and returns the original future. Useful for debugging."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Future.value(3).tap(console.log);\n// Log: 3\n// Future<3>\n")),(0,r.kt)("h3",{id:"topromise"},".toPromise()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Future<A>.toPromise(): Promise<A>\n")),(0,r.kt)("p",null,"Takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"Future<T>")," and returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<T>")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Future.value(1).toPromise();\n// Promise<1>\n")),(0,r.kt)("h2",{id:"futureresultok-error"},(0,r.kt)("a",{parentName:"h2",href:"/future-result"},"Future<Result<Ok, Error>>")),(0,r.kt)("p",null,"We provide ",(0,r.kt)("a",{parentName:"p",href:"/future-result"},"some special helpers")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"Future"),"s containing a ",(0,r.kt)("inlineCode",{parentName:"p"},"Result"),"."),(0,r.kt)("h2",{id:"statics"},"Statics"),(0,r.kt)("h3",{id:"futureisfuturevalue"},"Future.isFuture(value)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"isFuture(value: unknown): boolean\n")),(0,r.kt)("p",null,"Type guard, checks if the provided value is a future."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Future.isFuture(Future.value(1));\n// true\n\nFuture.isFuture([]);\n// false\n")),(0,r.kt)("h3",{id:"futureallfutures"},"Future.all(futures)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"all(futures: Array<Future<A>>): Future<Array<A>>\n")),(0,r.kt)("p",null,'Turns an "array of futures of values" into a "future of array of value".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Future.all([Future.value(1), Future.value(2), Future.value(3)]);\n// Future<[1, 2, 3]>\n")),(0,r.kt)("h3",{id:"futureconcurrentfuturegetters-options"},"Future.concurrent(futureGetters, options)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"all(futures: Array<() => Future<A>>, {concurrency: number}): Future<Array<A>>\n")),(0,r.kt)("p",null,"Like ",(0,r.kt)("inlineCode",{parentName:"p"},"Future.all")," with a max concurrency, and in order to control the flow, provided with functions returning futures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Future.concurrent(\n  userIds.map((userId) => {\n    // notice we return a function\n    return () => getUserById(userId);\n  }),\n  { concurrency: 10 },\n);\n// Future<[...]>\n")),(0,r.kt)("h3",{id:"futurewaitms"},"Future.wait(ms)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"wait(ms: number): Future<void>\n")),(0,r.kt)("p",null,"Helper to create a future that resolves after ",(0,r.kt)("inlineCode",{parentName:"p"},"ms")," (in milliseconds)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'Future.wait(1000).tap(() => console.log("Hey"));\n// Logs "Hey" after 1s\n')),(0,r.kt)("h3",{id:"futureallfromdictfutures"},"Future.allFromDict(futures)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"allFromDict(futures: Dict<Future<A>>): Future<Dict<A>>\n")),(0,r.kt)("p",null,'Turns a "dict of futures of values" into a "future of dict of value".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Future.allFromDict({\n  a: Future.value(1),\n  b: Future.value(2),\n  c: Future.value(3),\n});\n// Future<{a: 1, b: 2, c: 3}>\n")),(0,r.kt)("h3",{id:"futurefrompromisepromise"},"Future.fromPromise(promise)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"fromPromise<A>(promise: Promise<A>): Future<Result<A, unknown>>\n")),(0,r.kt)("p",null,"Takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<T>")," and returns a ",(0,r.kt)("a",{parentName:"p",href:"/future-result"},(0,r.kt)("inlineCode",{parentName:"a"},"Future<Result<T, Error>>"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Future.fromPromise(Promise.resolve(1));\n// Future<Result.Ok<1>>\n\nFuture.fromPromise(Promise.reject(1));\n// Future<Result.Error<1>>\n")),(0,r.kt)("h2",{id:"cancellation"},"Cancellation"),(0,r.kt)("h3",{id:"basics"},"Basics"),(0,r.kt)("p",null,"In JavaScript, ",(0,r.kt)("inlineCode",{parentName:"p"},"Promises")," are not cancellable."),(0,r.kt)("p",null,"That can be limiting at times, especially when using ",(0,r.kt)("inlineCode",{parentName:"p"},"React"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect"),", that let's you return a cancellation effect in order to prevent unwanted side-effects."),(0,r.kt)("p",null,"You can return a cleanup effect from the future ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const future = Future.make((resolve) => {\n  const timeoutId = setTimeout(() => {\n    resolve(1);\n  }, 1000);\n  // will run on cancellation\n  return () => clearTimeout(timeoutId);\n});\n")),(0,r.kt)("p",null,"To cancel a ",(0,r.kt)("inlineCode",{parentName:"p"},"future"),", call ",(0,r.kt)("inlineCode",{parentName:"p"},"future.cancel()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"future.cancel();\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can only ",(0,r.kt)("inlineCode",{parentName:"p"},"cancel")," a pending future."),(0,r.kt)("p",{parentName:"admonition"},"Calling cancel on a resolved future is a no-op, meaning the future will keep its resolved state.")),(0,r.kt)("p",null,"A cancelled future will automatically cancel any future created from it (e.g. from ",(0,r.kt)("inlineCode",{parentName:"p"},".map")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".flatMap"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const future = Future.make((resolve) => {\n  const timeoutId = setTimeout(() => {\n    resolve(1);\n  }, 1000);\n  // will run on cancellation\n  return () => clearTimeout(timeoutId);\n});\n\nconst future2 = future.map((x) => x * 2);\n\nfuture.cancel(); // Both `future` and `future2` are cancelled\n")),(0,r.kt)("h3",{id:"bubbling-cancellation"},"Bubbling cancellation"),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},".map*")," and ",(0,r.kt)("inlineCode",{parentName:"p"},".flatMap*")," methods take an extra parameter called ",(0,r.kt)("inlineCode",{parentName:"p"},"propagateCancel"),", it enables the returned future ",(0,r.kt)("inlineCode",{parentName:"p"},"cancel")," to bubble up cancellation to its depedencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// disabled by default: cancelling `future2` will not cancel `future`\nconst future2 = future.map((x) => x * 2);\n\n// optin: cancelling `future2` will cancel `future`\nconst future2 = future.map((x) => x * 2, true);\n")),(0,r.kt)("p",null,"This can be useful at call site:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const request = apiCall().map(parse, true);\n\nrequest.cancel(); // will run the cleanup effect in `apiCall`\n")),(0,r.kt)("h2",{id:"cheatsheet"},"Cheatsheet"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Input"),(0,r.kt)("th",{parentName:"tr",align:null},"Function input"),(0,r.kt)("th",{parentName:"tr",align:null},"Function output"),(0,r.kt)("th",{parentName:"tr",align:null},"Returned value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#mapf"},(0,r.kt)("inlineCode",{parentName:"a"},"map"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Future(x)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"y")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Future(y)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#flatmapf"},(0,r.kt)("inlineCode",{parentName:"a"},"flatMap"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Future(x)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Future(y)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Future(y)"))))))}c.isMDXComponent=!0}}]);