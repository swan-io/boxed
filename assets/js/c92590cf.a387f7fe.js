"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[247],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),p=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(r),y=a,d=s["".concat(u,".").concat(y)]||s[y]||m[y]||o;return r?n.createElement(d,i(i({ref:t},c),{},{components:r})):n.createElement(d,i({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=y;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},2656:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={title:"Retry",sidebar_label:"Retry"},i=void 0,l={unversionedId:"retry",id:"retry",title:"Retry",description:"When some operations can fail, you might want to implement a retry logic.",source:"@site/docs/retry.md",sourceDirName:".",slug:"/retry",permalink:"/retry",draft:!1,editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/retry.md",tags:[],version:"current",frontMatter:{title:"Retry",sidebar_label:"Retry"},sidebar:"docs",previous:{title:"Cancellable Request",permalink:"/cancellable-request"},next:{title:"Concurrency",permalink:"/concurrency"}},u={},p=[{value:"Retry with maximum attempts",id:"retry-with-maximum-attempts",level:2},{value:"Retry with delay",id:"retry-with-delay",level:2}],c={toc:p},s="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(s,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When some operations can fail, you might want to implement a retry logic."),(0,a.kt)("h2",{id:"retry-with-maximum-attempts"},"Retry with maximum attempts"),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"getUserById")," outputs a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result.Ok")," value, the future resolves, if it outputs a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result.Error"),", it re-executes ",(0,a.kt)("inlineCode",{parentName:"p"},"getUserById"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// retry immediately after failure\nFuture.retry(() => getUserById(userId), { max: 3 });\n// Future<Result<...>>\n")),(0,a.kt)("h2",{id:"retry-with-delay"},"Retry with delay"),(0,a.kt)("p",null,"The function you pass ",(0,a.kt)("inlineCode",{parentName:"p"},"Future.retry")," takes an ",(0,a.kt)("inlineCode",{parentName:"p"},"attempt")," parameter, which is the current number of attempts. The count starts at ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// adding delay\nFuture.retry(\n  (attempt) => {\n    return Future.wait(attempt * 100).flatMap(() => getUserById(userId));\n  },\n  { max: 10 },\n);\n// Future<Result<...>>\n")))}m.isMDXComponent=!0}}]);