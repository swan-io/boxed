"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[241],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6770:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={title:"Design choices",sidebar_label:"Design choices"},o=void 0,l={unversionedId:"design-choices",id:"design-choices",title:"Design choices",description:"Chaining API",source:"@site/docs/design-choices.md",sourceDirName:".",slug:"/design-choices",permalink:"/design-choices",draft:!1,editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/design-choices.md",tags:[],version:"current",frontMatter:{title:"Design choices",sidebar_label:"Design choices"},sidebar:"docs",previous:{title:"Installation",permalink:"/installation"},next:{title:"Option",permalink:"/option"}},s={},c=[{value:"Chaining API",id:"chaining-api",level:2},{value:"Eager over lazy",id:"eager-over-lazy",level:2},{value:"Naming",id:"naming",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"chaining-api"},"Chaining API"),(0,i.kt)("p",null,"Most functional programming libraries in JavaScript provide a data-last API (",(0,i.kt)("inlineCode",{parentName:"p"},"map(func)(value)"),") along with a ",(0,i.kt)("inlineCode",{parentName:"p"},"pipe")," function to chain operations."),(0,i.kt)("p",null,"While this approach works well in languages that include some kind of native pipe operator, we consider that it doesn't provide a good enough developer experience in your TypeScript code editor: it makes it tedious to inspect a value in a ",(0,i.kt)("inlineCode",{parentName:"p"},"pipe")," chain and doesn't provide autocomplete natively."),(0,i.kt)("p",null,"For this reason, we decided to use good ol'chaining, reducing the number of imports, making your code more expressive, easier to read and inspect."),(0,i.kt)("h2",{id:"eager-over-lazy"},"Eager over lazy"),(0,i.kt)("p",null,"More often than not, these functional programming libraries use lazy initialisation, meaning your code won't execute until you tell it to explicitely (e.g. with a ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," call at the end)."),(0,i.kt)("p",null,"In the vast majority of cases we've seen, this is not something that's wanted. For the few cases where laziness is wanted, making a function that returns the data-structure or using a ",(0,i.kt)("inlineCode",{parentName:"p"},"Deferred")," does the job pretty well."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const eagerFuture = Future.make((resolve) => resolve(1));\n\nconst lazyFuture = () => Future.make((resolve) => resolve(1));\n\nconst [deferred, resolve] = Deferred.make<number>();\n")),(0,i.kt)("h2",{id:"naming"},"Naming"),(0,i.kt)("p",null,"Rather than using naming from abstract theory, if a concept exists in JavaScript built-ins, Boxed will provide similar naming (e.g. we provide ",(0,i.kt)("inlineCode",{parentName:"p"},"Future.all")," to mimic ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise.all")," rather than ",(0,i.kt)("inlineCode",{parentName:"p"},"Future.sequenceArray"),")."))}d.isMDXComponent=!0}}]);